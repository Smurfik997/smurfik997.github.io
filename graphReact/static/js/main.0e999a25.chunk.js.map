{"version":3,"sources":["App.js","index.js"],"names":["Mobile","React","createContext","Graph","props","nodeUpdate","index","newPosition","setState","state","nodes","left","top","nodeDelete","edges","forEach","edge","indexEdge","parseInt","i","length","splice","crosshair","display","edgeDelete","crosshairState","x","y","paintAlgo","colorSeed","nodesCount","matrix","Array","fill","_","node","push","n","k","color","max","j","painted","freeNode","textColor","Math","min","colorSeedUpdate","newColorSeed","drag","e","target","_this","callback","TouchEndEvent","document","ontouchend","TouchMoveEvent","ontouchmove","mobile","style","cursor","crosshairPos","scale","offsetLeft","clientWidth","offsetTop","clientHeight","touches","pointerPos","pageX","pageY","removeEventListener","touchMove","preventDefault","pos","className","innerText","addEventListener","passive","onmousemove","onmouseup","position","this","v1","v2","Error","Provider","value","id","DOMElement","map","key","update","delete","enable","Component","Node","backgroundColor","onTouchStart","onMouseDown","context","onDoubleClick","tabIndex","contextType","Edge","angle","atan","PI","height","sqrt","cos","sin","transform","Crosshair","EdgeBar","focusOut","persist","relatedTarget","current","tagName","graph","querySelector","addEdge","body","createRef","onSubmit","ref","placeholder","onFocus","select","setAttribute","onBlur","type","onClick","PaintButton","ReactDOM","render","window","navigator","maxTouchPoints","longTouch","onmousedown","altKey","addNode","ondblclick","ontouchstart","setTimeout","event","createEvent","initEvent","dispatchEvent","clearTimeout"],"mappings":"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","file":"static/js/main.0e999a25.chunk.js","sourcesContent":["import React from 'react';\n\nconst Mobile = React.createContext();\n\n//=================================================================================\n//=================================================================================\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            'nodes': [],\n            'edges': [],\n            'crosshair': {\n                'enable': true,\n                'display': false,\n                'top': 0,\n                'left': 0\n            },\n            'colorSeed': [\n                [1867, 4931, 6073],\n                131,\n                110,\n                80\n            ],\n            'mobile': false,\n            'scale': 2.7\n        }\n    }\n\n    addNode(position = [0, 0]) {\n        this.setState((state) => {\n            state.nodes.push({\n                left: position[0] > 0? position[0] : 0,\n                top: position[1] > 0? position[1] : 0\n            });\n\n            return state;\n        });\n    }\n\n    addEdge(v1, v2) {\n        if (this.state.nodes[v1] && this.state.nodes[v2] && v1 !== v2) {\n            this.setState((state) => {\n                state.edges.push([v1, v2]);\n\n                return state;\n            });\n            return 'success';\n        }\n\n        throw Error('Саша ИЗВИНИ');\n    }\n\n    nodeUpdate = (index, newPosition) => {\n        this.setState((state) => {\n            state.nodes[index].left = newPosition[0];\n            state.nodes[index].top = newPosition[1];\n\n            return state;\n        });\n    }\n\n    nodeDelete = (index) => {\n        this.setState((state) => {\n            state.edges.forEach((edge, indexEdge) => {\n                if (parseInt(edge[0]) === index || parseInt(edge[1]) === index)\n                    state.edges[indexEdge] = null;\n            })\n\n            let i = 0\n            while (i < state.edges.length) {\n                if (state.edges[i] === null) state.edges.splice(i, 1); else i++;\n            }\n\n            state.nodes[index] = null;\n            state.crosshair.display = false;\n\n            return state;\n        });\n    }\n\n    edgeDelete = (index) => {\n        this.setState((state) => {\n            state.edges.splice(index, 1);\n\n            return state;\n        });\n    }\n\n    crosshair = (crosshairState, x, y) => {\n        this.setState((state) => {\n            if (x) state.crosshair.left = x;\n            if (y) state.crosshair.top = y;\n            state.crosshair.display = crosshairState;   \n\n            return state;\n        });\n    }\n\n    paintAlgo = () => {\n        const colorSeed = this.state.colorSeed;\n\n        let nodes = [],\n            nodesCount = this.state.nodes.length,\n            edges = this.state.edges;\n        let matrix = new Array(nodesCount).fill(0);\n        matrix.forEach((_, i) => matrix[i] = new Array(nodesCount));\n\n        edges.forEach((edge) => {\n            matrix[edge[0]][edge[1]] = 1;\n            matrix[edge[1]][edge[0]] = 1;\n        })\n\n        this.state.nodes.forEach((node, i) => {\n            if (node) {\n                nodes.push(node);\n                let n = 0;\n\n                for (let k = 0; k < nodesCount; k++)\n                    if (matrix[i][k] === 1) n++;\n\n                nodes[nodes.length - 1].color = null;\n                nodes[nodes.length - 1].index = i;\n                nodes[nodes.length - 1].n = n;\n            }\n        });\n\n        for (let i = 0; i < nodes.length; i++) {\n            let max = i;\n\n            for (let j = i + 1; j < nodes.length; j++)\n                if (nodes[max].n < nodes[j].n) max = j;\n\n            [nodes[i], nodes[max]] = [nodes[max], nodes[i]];\n        }\n\n        let color = 1, painted = 0;\n        \n        while (painted < nodes.length) {\n            painted = 0;\n\n            for (let i = 0; i < nodes.length; i++) {\n                if (!nodes[i].color) {\n                    let freeNode = true;\n\n                    for (let j = 0; j < nodes.length; j++) {\n                        if (nodes[j].color && nodes[j].color === color && matrix[nodes[i].index][nodes[j].index] === 1) {\n                            freeNode = false;\n                            break;\n                        }\n                    }\n\n                    if (freeNode) nodes[i].color = color;\n                } else painted++;\n            }\n\n            color++;\n        }\n\n        nodes.forEach((node, i) => {\n            nodes[i].color = [\n                colorSeed[0][0] * node.color % colorSeed[1] + colorSeed[2], \n                colorSeed[0][1] * node.color % colorSeed[1] + colorSeed[2], \n                colorSeed[0][2] * node.color % colorSeed[1] + colorSeed[2]\n            ];\n            nodes[i].textColor = [\n                Math.min(nodes[i].color[0] + colorSeed[3], 255), \n                Math.min(nodes[i].color[1] + colorSeed[3], 255), \n                Math.min(nodes[i].color[2] + colorSeed[3], 255)\n            ];\n        });\n        this.setState({nodes: this.state.nodes});\n\n        return color - 2;\n    }\n\n    colorSeedUpdate = (newColorSeed) => {\n        this.setState({colorSeed: newColorSeed});\n        this.paintAlgo();\n    }\n\n    drag = (e, target, _this, callback, crosshairState = false) => {\n        const TouchEndEvent = document.ontouchend,\n                TouchMoveEvent = document.ontouchmove;\n        \n        if (this.state.mobile !== true) target.style.cursor = 'grabbing';\n        let crosshairPos = [0, 0],\n            scale = 1.0;\n\n        if (this.state.mobile === true) scale *= this.state.scale;\n\n        if (crosshairState) {\n            crosshairPos[0] = target.offsetLeft + target.clientWidth / 2 - 0.8 * scale;\n            crosshairPos[1] = target.offsetTop + target.clientHeight / 2 - 0.8 * scale;\n            this.crosshair(true, crosshairPos[0], crosshairPos[1], target);\n        }\n\n        if (this.state.mobile === true && e.touches) {\n            const pointerPos = [\n                e.touches[0].pageX - target.offsetLeft,\n                e.touches[0].pageY - target.offsetTop\n            ];\n\n            document.ontouchend = (e) => {\n                if (crosshairState) this.crosshair(false);\n                document.removeEventListener('touchmove', touchMove);\n                document.ontouchmove = TouchMoveEvent;\n                document.ontouchend = TouchEndEvent;\n            }\n            \n            const touchMove = (e) => {\n                e.preventDefault();\n                let pos = [e.touches[0].pageX - pointerPos[0], e.touches[0].pageY - pointerPos[1]];\n                if ((pos[0] < 0 || pos[1] < 0) && target.className === 'Node') {\n                    this.nodeDelete(parseInt(target.innerText));\n                    document.ontouchend();\n                } else {\n                    if (pos[0] < 0) pos[0] = 0;\n                    if (pos[1] < 0) pos[1] = 0;\n                    crosshairPos[0] = pos[0] + target.clientWidth / 2 - 0.8 * scale;\n                    crosshairPos[1] = pos[1] + target.clientHeight / 2 - 0.8 * scale;\n                    if (crosshairState) this.crosshair(true, crosshairPos[0], crosshairPos[1]);\n                    callback(_this, pos);\n                }\n            }\n\n            document.addEventListener('touchmove', touchMove, {passive: false});\n        } else {\n            const pointerPos = [\n                e.pageX - target.offsetLeft,\n                e.pageY - target.offsetTop\n            ];\n\n            document.onmousemove = (e) => {\n                let pos = [e.pageX - pointerPos[0], e.pageY - pointerPos[1]];\n                if (pos[0] < 0) pos[0] = 0;\n                if (pos[1] < 0) pos[1] = 0;\n                crosshairPos[0] = pos[0] + target.clientWidth / 2 - 0.8 * scale;\n                crosshairPos[1] = pos[1] + target.clientHeight / 2 - 0.8 * scale;\n                if (crosshairState) this.crosshair(true, crosshairPos[0], crosshairPos[1]);\n                callback(_this, pos);\n            }\n\n            document.onmouseup = (e) => {\n                target.style.cursor = 'grab';\n                if (crosshairState) this.crosshair(false);\n                document.onmousemove = () => {}\n                document.onmouseup = () => {}\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Mobile.Provider value={{\n                mobile: this.state.mobile,\n                scale: this.state.scale\n            }}>\n                <div id={this.props.DOMElement['Nodes']}>\n                    {this.state.nodes.map((node, index) => {\n                        return node? <Node\n                            key={index} \n                            index={index} \n                            nodes={this.state.nodes} \n                            update={this.nodeUpdate} \n                            delete={this.nodeDelete}\n                            drag={this.drag}\n                            color={node.color}\n                            textColor={node.textColor}\n                        /> : null;\n                    })}\n                </div>\n                <div id={this.props.DOMElement['Edges']}>\n                    {this.state.edges.map((edge, index) => <Edge\n                        key={index} \n                        index={index} \n                        delete={this.edgeDelete}\n                        v1={this.state.nodes[edge[0]]} \n                        v2={this.state.nodes[edge[1]]}\n                    />)}\n                </div>\n                {this.state.crosshair.enable && this.state.crosshair.display? <Crosshair\n                    left={this.state.crosshair.left}\n                    top={this.state.crosshair.top}\n                    target={this.state.crosshair.target}\n                /> : null}\n            </Mobile.Provider>\n        )\n    }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass Node extends React.Component {\n    static contextType = Mobile;\n\n    constructor(props) {\n        super(props);\n    }\n\n    drag = (e) => {\n        this.props.drag(e, e.target, this, (_this, pos) => {\n            _this.props.update(this.props.index, [pos[0], pos[1]]);\n        }, true)\n    }\n    \n    render() {\n        const color = this.props.color,\n                textColor = this.props.textColor;\n\n        return (\n            <div\n                className='Node'\n                style={{\n                    left: this.props.nodes[this.props.index].left,\n                    top: this.props.nodes[this.props.index].top,\n                    backgroundColor: color? `rgb(${color[0]}, ${color[1]}, ${color[2]})`: '',\n                    color: textColor? `rgb(${textColor[0]}, ${textColor[1]}, ${textColor[2]})`: ''\n                }}\n                onTouchStart={this.drag}\n                onMouseDown={(e) => {\n                    if (!this.context.mobile) this.drag(e);\n                }}\n                onDoubleClick={(e) => {\n                    e.preventDefault();\n                    this.props.delete(this.props.index)}\n                }\n                tabIndex=\"3\"\n            >\n                {this.props.index}\n            </div> \n        )\n    }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass Edge extends React.Component {\n    static contextType = Mobile;\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let [v1, v2] = [this.props.v1, this.props.v2];\n        const [x, y] = [v1.left - v2.left, v1.top - v2.top];\n        let angle = Math.atan(y / x);\n        if (x >= 0) angle += Math.PI;\n        angle -= Math.PI / 2;\n\n        let scale = 1.0;\n        if (this.context.mobile === true) scale *= this.context.scale;\n\n        return (\n            <div\n                className='Edge'\n                style={{\n                    height: Math.sqrt(x*x + y*y),\n                    left: v1.left + 27 * scale / 2 - 2 * Math.cos(angle) * scale,\n                    top: v1.top + 27 * scale / 2 - 2 * Math.sin(angle) * scale,\n                    transform: `rotate(${angle}rad)`\n                }}\n                onDoubleClick={() => this.props.delete(this.props.index)}\n            />\n        )\n    }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass Crosshair extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <div id=\"crosshairVert\" style={{left: this.props.left}}/>\n                <div id=\"crosshairHorizontal\" style={{top: this.props.top}}/>\n            </div>\n        )\n    }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass EdgeBar extends React.Component {\n    constructor(props) {\n        super(props);\n        let scale = 1.0;\n        if (this.props.graph.state.mobile === true) scale *= this.props.graph.state.scale;\n\n        this.state = {\n            left: this.props.graph.state.mobile? document.body.clientWidth - 130 * scale : (document.body.clientWidth - 120) / 2,\n            top: 10 * scale\n        }\n        this.v1 = React.createRef();\n        this.v2 = React.createRef();\n    }\n\n    focusOut = (e, index) => {\n        e.persist();\n        //alert(e.relatedTarget);\n\n        if (e.relatedTarget && e.relatedTarget.className === \"Node\") {\n            this[`v${index}`].current.value = e.relatedTarget.innerText;\n        }\n    }\n\n    drag = (e) => {\n        if (e.target.tagName !== 'INPUT') {\n            this.props.graph.drag(e, document.querySelector('#edge_bar'), this, (_this, pos) => {\n                _this.setState({left: pos[0], top: pos[1]})\n            })\n        }\n    }\n\n    addEdge = (e) => {\n        e.preventDefault();\n        const res = this.props.graph.addEdge(this.v1.current.value, this.v2.current.value);\n        //error\n    }\n\n    render() {\n        return (\n            <form\n                onMouseDown={this.drag}\n                onTouchStart={this.drag}\n                onSubmit={(e) => this.addEdge(e)}\n                id=\"edge_bar\"\n                style={{left: this.state.left, top: this.state.top}}\n            >\n                <input\n                    ref={this.v1}\n                    placeholder=\"0\"\n                    onFocus={() => {\n                        this.v1.current.select()\n                        this.v1.current.setAttribute('tabIndex', 1);\n                        this.v2.current.setAttribute('tabIndex', 2);\n                    }}\n                    onBlur={(e) => this.focusOut(e, 1)}\n                    type=\"tel\"\n                />\n                <div\n                    onClick={() => {\n                        [this.v1.current.value, this.v2.current.value] = [this.v2.current.value, this.v1.current.value];\n                    }}\n                >+</div>\n                <input\n                    ref={this.v2}\n                    placeholder=\"1\"\n                    onFocus={() => {\n                        this.v2.current.select()\n                        this.v2.current.setAttribute('tabIndex', 1);\n                        this.v1.current.setAttribute('tabIndex', 2);\n                    }}\n                    onBlur={(e) => this.focusOut(e, 2)}\n                    type=\"tel\"\n                />\n                <button>З'єднати</button>\n            </form>\n        )\n    }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass PaintButton extends React.Component {\n    constructor(props) {\n        super(props);\n        let scale = 1.0;\n        if (this.props.graph.state.mobile === true) scale *= this.props.graph.state.scale;\n\n        this.state = {\n            left: 10 * scale,\n            top: 10 * scale\n        }\n    }\n\n    drag = (e) => {\n        this.props.graph.drag(e, e.target, this, (_this, pos) => {\n            this.setState({left: pos[0], top: pos[1]});\n        })\n    }\n\n    render() {\n        return (\n            <button\n                onMouseDown={this.drag}\n                onTouchStart={this.drag}\n                onClick={this.props.graph.paintAlgo}\n                style={{\n                    left: this.state.left,\n                    top: this.state.top\n                }}\n            >Фарбувати</button>\n        )\n    }\n}\n\n//=================================================================================\n//=================================================================================\n\nexport {Graph, Node, Edge, EdgeBar, Crosshair, PaintButton};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Graph, Node, Edge, EdgeBar, Crosshair, PaintButton} from './App';\n\nconst graph = ReactDOM.render(<Graph DOMElement = {{\n    'Nodes': 'node_container',\n    'Edges': 'edge_container'\n}}/>, document.querySelector('#graph_container'));\n\nif (window.navigator.maxTouchPoints > 0) {\n    document.querySelector('#graph_container').setAttribute('mobile', true); \n    document.querySelector('#edge_bar_container').setAttribute('mobile', true);\n    document.querySelector('#paint_button').setAttribute('mobile', true);\n    document.querySelector('#copyright').setAttribute('mobile', true);\n    graph.setState({mobile: true});\n}\n\nconst edgeBar = ReactDOM.render(<EdgeBar graph={graph}/>, document.querySelector('#edge_bar_container'));\nconst paintButton = ReactDOM.render(<PaintButton graph={graph}/>, document.querySelector('#paint_button'));\n\nlet scale = 1.0;\nif (graph.state.mobile === true) scale *= graph.state.scale;\n\n//=================================================================================\n//=================================================================================\n\ndocument.onmousedown = (e) => {\n    if (e.altKey === true) graph.addNode([e.pageX - 27 * scale / 2, e.pageY - 27 * scale / 2]);\n}\n\ndocument.ondblclick = (e) => {\n    e.preventDefault();\n    if (e.target === document.body) graph.addNode([e.pageX - 27 * scale / 2, e.pageY - 27 * scale / 2]);\n}\n\nlet longTouch;\n\ndocument.ontouchstart = (e) => {\n    if (e.target.tagName === 'BODY') \n        if (e.touches.length === 1) \n            longTouch = setTimeout(() => {\n                graph.addNode([e.touches[0].pageX - 27 * scale / 2, e.touches[0].pageY - 27 * scale / 2]);\n            }, 300);\n\n    if (e.target.className === 'Edge') {\n        if (e.touches.length === 1) \n            longTouch = setTimeout(() => {\n                let event = document.createEvent('Events');\n                event.initEvent('dblclick', true, false);\n                e.target.dispatchEvent(event);\n            }, 300);\n    }\n}\n\ndocument.ontouchmove = (e) => {\n    clearTimeout(longTouch);\n}\n\ndocument.ontouchend = (e) => {\n    clearTimeout(longTouch);\n}"],"sourceRoot":""}