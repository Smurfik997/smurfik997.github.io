{"version":3,"sources":["App.js","index.js"],"names":["Graph","props","nodeUpdate","index","newPosition","state","nodes","left","top","setState","nodeDelete","edges","forEach","edge","indexEdge","i","length","splice","edgeDelete","crosshair","x","y","display","paintAlgo","colorSeed","nodesCount","matrix","Array","fill","_","node","push","n","k","color","max","j","painted","freeNode","textColor","Math","min","colorSeedUpdate","newColorSeed","drag","e","target","_this","callback","crosshairState","style","cursor","crosshairPos","offsetLeft","clientWidth","offsetTop","clientHeight","pointerPos","pageX","pageY","document","onmousemove","pos","onmouseup","position","this","v1","v2","id","DOMElement","map","key","update","delete","enable","React","Component","Node","className","backgroundColor","onMouseDown","onDoubleClick","Edge","angle","atan","PI","height","sqrt","cos","sin","transform","Crosshair","EdgeBar","focusOut","persist","relatedTarget","current","value","innerText","addEdge","preventDefault","graph","body","createRef","tagName","querySelector","onSubmit","ref","placeholder","onFocus","select","setAttribute","onBlur","onClick","PaintButton","ReactDOM","render","onmousedown","altKey","addNode","ondblclick"],"mappings":"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","file":"static/js/main.6447987a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Graph extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          'nodes': [],\n          'edges': [],\n          'crosshair': {\n              'enable': true,\n              'display': false,\n              'top': 0,\n              'left': 0\n          },\n          'colorSeed': [\n              [1867, 4931, 6073],\n              131,\n              110,\n              80\n          ]   \n      }\n  }\n\n  addNode(position = [0, 0]) {\n      this.state.nodes.push({\n          left: position[0] > 0? position[0] : 0,\n          top: position[1] > 0? position[1] : 0\n      })\n      this.setState({nodes: this.state.nodes});\n  }\n\n  addEdge(v1, v2) {\n      if (this.state.nodes[v1] && this.state.nodes[v2] && v1 != v2) {\n          this.state.edges.push([v1, v2])\n          this.setState({edges: this.state.edges});\n          return 'success';\n      }\n\n      throw 'Саша ИЗВИНИ';\n  }\n\n  nodeUpdate = (index, newPosition) => {\n      this.state.nodes[index].left = newPosition[0];\n      this.state.nodes[index].top = newPosition[1];\n\n      this.setState({nodes: this.state.nodes});\n  }\n\n  nodeDelete = (index) => {\n      this.state.edges.forEach((edge, indexEdge) => {\n          if (edge[0] == index || edge[1] == index)\n              this.state.edges[indexEdge] = null;\n      })\n\n      let i = 0\n      while (i < this.state.edges.length) {\n          if (this.state.edges[i] == null) this.state.edges.splice(i, 1); else i++;\n      }\n\n      this.state.nodes[index] = null;\n      this.setState({edges: this.state.edges, nodes: this.state.nodes});\n  }\n\n  edgeDelete = (index) => {\n      this.state.edges.splice(index, 1);\n      this.setState({edges: this.state.edges});\n  }\n\n  crosshair = (state, x, y) => {\n      if (x) this.state.crosshair.left = x;\n      if (y) this.state.crosshair.top = y;\n      this.state.crosshair.display = state;\n\n      this.setState({crosshair: this.state.crosshair});\n  }\n\n  paintAlgo = () => {\n      const colorSeed = this.state.colorSeed;\n\n      let nodes = [],\n          nodesCount = this.state.nodes.length,\n          edges = this.state.edges;\n      let matrix = new Array(nodesCount).fill(0);\n      matrix.forEach((_, i) => matrix[i] = new Array(nodesCount));\n\n      edges.forEach((edge) => {\n          matrix[edge[0]][edge[1]] = 1;\n          matrix[edge[1]][edge[0]] = 1;\n      })\n\n      this.state.nodes.forEach((node, i) => {\n          if (node) {\n              nodes.push(node);\n              let n = 0;\n\n              for (let k = 0; k < nodesCount; k++)\n                  if (matrix[i][k] == 1) n++;\n\n              nodes[nodes.length - 1].color = null;\n              nodes[nodes.length - 1].index = i;\n              nodes[nodes.length - 1].n = n;\n          }\n      });\n\n      for (let i = 0; i < nodes.length; i++) {\n          let max = i;\n\n          for (let j = i + 1; j < nodes.length; j++)\n              if (nodes[max].n < nodes[j].n) max = j;\n\n          [nodes[i], nodes[max]] = [nodes[max], nodes[i]];\n      }\n\n      let color = 1, painted = 0;\n      \n      while (painted < nodes.length) {\n          painted = 0;\n\n          for (let i = 0; i < nodes.length; i++) {\n              if (!nodes[i].color) {\n                  let freeNode = true;\n\n                  for (let j = 0; j < nodes.length; j++) {\n                      if (nodes[j].color && nodes[j].color == color && matrix[nodes[i].index][nodes[j].index] == 1) {\n                          freeNode = false;\n                          break;\n                      }\n                  }\n\n                  if (freeNode) nodes[i].color = color;\n              } else painted++;\n          }\n\n          color++;\n      }\n\n      nodes.forEach((node, i) => {\n          nodes[i].color = [\n              colorSeed[0][0] * node.color % colorSeed[1] + colorSeed[2], \n              colorSeed[0][1] * node.color % colorSeed[1] + colorSeed[2], \n              colorSeed[0][2] * node.color % colorSeed[1] + colorSeed[2]\n          ];\n          nodes[i].textColor = [\n              Math.min(nodes[i].color[0] + colorSeed[3], 255), \n              Math.min(nodes[i].color[1] + colorSeed[3], 255), \n              Math.min(nodes[i].color[2] + colorSeed[3], 255)\n          ];\n      });\n      this.setState({nodes: this.state.nodes});\n\n      return color - 2;\n  }\n\n  colorSeedUpdate = (newColorSeed) => {\n      this.setState({colorSeed: newColorSeed});\n      this.paintAlgo();\n  }\n\n  drag = (e, target, _this, callback, crosshairState = false) => {\n      target.style.cursor = 'grabbing';\n      let crosshairPos = [0, 0];\n      if (crosshairState) {\n          crosshairPos[0] = target.offsetLeft + target.clientWidth / 2 - 0.8;\n          crosshairPos[1] = target.offsetTop + target.clientHeight / 2 - 0.8;\n          this.crosshair(true, crosshairPos[0], crosshairPos[1], target);\n      }\n\n      const pointerPos = [\n          e.pageX - target.offsetLeft,\n          e.pageY - target.offsetTop\n      ]\n\n      document.onmousemove = (e) => {\n          let pos = [e.pageX - pointerPos[0], e.pageY - pointerPos[1]];\n          if (pos[0] < 0) pos[0] = 0;\n          if (pos[1] < 0) pos[1] = 0;\n          crosshairPos[0] = pos[0] + target.clientWidth / 2 - 0.8;\n          crosshairPos[1] = pos[1] + target.clientHeight / 2 - 0.8;\n          if (crosshairState) this.crosshair(true, crosshairPos[0], crosshairPos[1]);\n          callback(_this, pos);\n      }\n\n      document.onmouseup = (e) => {\n          target.style.cursor = 'grab';\n          if (crosshairState) this.crosshair(false);\n          document.onmousemove = () => {}\n          document.onmouseup = () => {}\n      }\n  }\n\n  render() {\n      return (\n          <div>\n              <div id={this.props.DOMElement['Nodes']}>\n                  {this.state.nodes.map((node, index) => {\n                      return node? <Node\n                          key={index} \n                          index={index} \n                          nodes={this.state.nodes} \n                          update={this.nodeUpdate} \n                          delete={this.nodeDelete}\n                          drag={this.drag}\n                          color={node.color}\n                          textColor={node.textColor}\n                      /> : null;\n                  })}\n              </div>\n              <div id={this.props.DOMElement['Edges']}>\n                  {this.state.edges.map((edge, index) => <Edge\n                      key={index} \n                      index={index} \n                      delete={this.edgeDelete}\n                      v1={this.state.nodes[edge[0]]} \n                      v2={this.state.nodes[edge[1]]}\n                  />)}\n              </div>\n              {this.state.crosshair.enable && this.state.crosshair.display? <Crosshair\n                  left={this.state.crosshair.left}\n                  top={this.state.crosshair.top}\n                  target={this.state.crosshair.target}\n              /> : null}\n          </div>\n      )\n  }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass Node extends React.Component {\n  constructor(props) {\n      super(props);\n  }\n  \n  render() {\n      const color = this.props.color,\n            textColor = this.props.textColor;\n\n      return (\n          <button\n              className='Node'\n              style={{\n                  left: this.props.nodes[this.props.index].left,\n                  top: this.props.nodes[this.props.index].top,\n                  backgroundColor: color? `rgb(${color[0]}, ${color[1]}, ${color[2]})`: '',\n                  color: textColor? `rgb(${textColor[0]}, ${textColor[1]}, ${textColor[2]})`: ''\n              }}\n              onMouseDown={(e) => this.props.drag(e, e.target, this, (_this, pos) => {\n                  _this.props.update(this.props.index, [pos[0], pos[1]]);\n              }, true)}\n              onDoubleClick={() => this.props.delete(this.props.index)}\n          >\n              {this.props.index}\n          </button> \n      )\n  }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass Edge extends React.Component {\n  constructor(props) {\n      super(props);\n  }\n\n  render() {\n      let [v1, v2] = [this.props.v1, this.props.v2];\n      const [x, y] = [v1.left - v2.left, v1.top - v2.top];\n      let angle = Math.atan(y / x);\n      if (x >= 0) angle += Math.PI;\n      angle -= Math.PI / 2;\n\n      return (\n          <div\n              className='Edge'\n              style={{\n                  height: Math.sqrt(x*x + y*y),\n                  left: v1.left + 27 / 2 - 2 * Math.cos(angle),\n                  top: v1.top + 27 / 2 - 2 * Math.sin(angle),\n                  transform: `rotate(${angle}rad)`\n              }}\n              onDoubleClick={() => this.props.delete(this.props.index)}\n          />\n      )\n  }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass Crosshair extends React.Component {\n  constructor(props) {\n      super(props);\n  }\n\n  render() {\n      return (\n          <div>\n              <div id=\"crosshairVert\" style={{left: this.props.left}}/>\n              <div id=\"crosshairHorizontal\" style={{top: this.props.top}}/>\n          </div>\n      )\n  }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass EdgeBar extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          left: (document.body.clientWidth - 120) / 2,\n          top: 10\n      }\n      this.v1 = React.createRef();\n      this.v2 = React.createRef();\n  }\n\n  focusOut = (e, index) => {\n      e.persist();\n\n      if (e.relatedTarget && e.relatedTarget.className == \"Node\") {\n          this[`v${index}`].current.value = e.relatedTarget.innerText;\n      }\n  }\n\n  addEdge = (e) => {\n      e.preventDefault();\n      const res = this.props.graph.addEdge(this.v1.current.value, this.v2.current.value);\n      //error\n  }\n\n  render() {\n      return (\n          <form\n              onMouseDown={(e) => {\n                  if (e.target.tagName != 'INPUT') {\n                      this.props.graph.drag(e, document.querySelector('#edge_bar'), this, (_this, pos) => {\n                          _this.setState({left: pos[0], top: pos[1]})\n                      })\n                  }\n              }}\n              onSubmit={(e) => this.addEdge(e)}\n              id=\"edge_bar\"\n              style={{left: this.state.left, top: this.state.top}}\n          >\n              <input\n                  ref={this.v1}\n                  placeholder=\"0\"\n                  onFocus={() => {\n                      this.v1.current.select()\n                      this.v1.current.setAttribute('tabIndex', 1);\n                      this.v2.current.setAttribute('tabIndex', 2);\n                  }}\n                  onBlur={(e) => this.focusOut(e, 1)}\n              />\n              <div\n                  onClick={() => {\n                      [this.v1.current.value, this.v2.current.value] = [this.v2.current.value, this.v1.current.value];\n                  }}\n              >+</div>\n              <input\n                  ref={this.v2}\n                  placeholder=\"1\"\n                  onFocus={() => {\n                      this.v2.current.select()\n                      this.v2.current.setAttribute('tabIndex', 1);\n                      this.v1.current.setAttribute('tabIndex', 2);\n                  }}\n                  onBlur={(e) => this.focusOut(e, 2)}\n              />\n              <button>З'єднати</button>\n          </form>\n      )\n  }\n}\n\n//=================================================================================\n//=================================================================================\n\nclass PaintButton extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          left: 10,\n          top: 10\n      }\n  }\n\n  render() {\n      return (\n          <button\n              onMouseDown={(e) => this.props.graph.drag(e, e.target, this, (_this, pos) => {\n                  this.setState({left: pos[0], top: pos[1]});\n              })}\n              onClick={this.props.graph.paintAlgo}\n              style={{\n                  left: this.state.left,\n                  top: this.state.top\n              }}\n          >Фарбувати</button>\n      )\n  }\n}\n\n//=================================================================================\n//=================================================================================\n\nexport {Graph, Node, Edge, EdgeBar, Crosshair, PaintButton};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Graph, Node, Edge, EdgeBar, Crosshair, PaintButton} from './App';\n\nconst graph = ReactDOM.render(<Graph DOMElement = {{\n    'Nodes': 'node_container',\n    'Edges': 'edge_container'\n}}/>, document.querySelector('#graph_container'));\nconst edgeBar = ReactDOM.render(<EdgeBar graph={graph}/>, document.querySelector('#edge_bar_container'));\nconst paintButton = ReactDOM.render(<PaintButton graph={graph}/>, document.querySelector('#paint_button'));\n\ndocument.onmousedown = (e) => {\n    if (e.altKey === true) graph.addNode([e.pageX - 27 / 2, e.pageY - 27 / 2]);\n}\n\ndocument.ondblclick = (e) => {\n    if (e.target == document.body) graph.addNode([e.pageX - 27 / 2, e.pageY - 27 / 2]);\n}\n"],"sourceRoot":""}